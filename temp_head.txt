                    int computedMax = Mathf.Max(1, (pd.maxHealth + 1) / 2);
                    shadeMaxHP = computedMax;
                    if (!LegacyHelper.HasSavedShadeState && shadeHP <= 0)
                        shadeHP = Mathf.Clamp((pd.health + 1) / 2, 0, shadeMaxHP);
                    shadeHP = Mathf.Clamp(shadeHP, 0, shadeMaxHP);
                    PushShadeStatsToHud();
                }
            }
            catch { }

            lastSavedHP = lastSavedMax = lastSavedSoul = -999;
            PersistIfChanged();
        }

        private void EnsurePogoTarget()
        {
            try
            {
                var pogo = transform.Find("PogoTarget")?.gameObject;
                if (pogo == null)
                {
                    pogo = new GameObject("PogoTarget");
                    pogo.transform.SetParent(transform, false);
                    pogo.transform.localPosition = Vector3.zero;
                }

                // Ensure collider present (trigger) so slash damager trigger can overlap
                var col = pogo.GetComponent<Collider2D>();
                if (!col)
                {
                    var cap = pogo.AddComponent<CapsuleCollider2D>();
                    cap.direction = CapsuleDirection2D.Vertical;
                    cap.size = new Vector2(0.95f, 1.45f);
                    cap.isTrigger = true;
                    col = cap;
                }
                else col.isTrigger = true;

                // Put on INTERACTIVE_OBJECT (or Default) so DownAttack's HitResponded path will process and allow bounce
                int interactiveLayer = LayerMask.NameToLayer("Interactive Object");
                if (interactiveLayer < 0) interactiveLayer = LayerMask.NameToLayer("Default");
                if (interactiveLayer < 0) interactiveLayer = 0;
                pogo.layer = interactiveLayer;

                // Attach HitResponse and configure to accept hero nail hits downward only
                // Optional puff-on-collision helper
                if (!pogo.GetComponent<ShadePogoPuff>()) pogo.AddComponent<ShadePogoPuff>();

                // Make sure shade's own rigidbody exists for trigger events
                if (rb) { /* already present */ }
