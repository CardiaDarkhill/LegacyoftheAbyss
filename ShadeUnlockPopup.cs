#nullable enable

using System;
using LegacyoftheAbyss.Shade;
using UnityEngine;
using UnityEngine.UI;

/// <summary>
/// Simple HUD overlay that surfaces unlock notifications generated by <see cref="ShadeRuntime"/>.
/// The popup listens for dispatcher events, keeps a small queue alive across scene loads, and
/// respects pause/menu visibility so messages never compete with menus.
/// </summary>
public sealed class ShadeUnlockPopup : MonoBehaviour
{
    private const float FadeSpeed = 6f;
    private const float BaseIconSize = 96f;
    private const float BaseFontSize = 32f;
    private const float BaseSpacing = 18f;
    private static readonly Vector2 AnchorPoint = new Vector2(0.82f, 0.22f);

    private static readonly Color AbilityColor = new Color(0.87f, 0.95f, 1f, 1f);
    private static readonly Color CharmColor = new Color(1f, 0.92f, 0.75f, 1f);
    private static readonly Color SpellColor = new Color(0.8f, 0.95f, 0.85f, 1f);

    private Canvas? targetCanvas;
    private Func<float>? scaleProvider;
    private RectTransform? container;
    private CanvasGroup? containerGroup;
    private HorizontalLayoutGroup? layoutGroup;
    private ContentSizeFitter? contentSizeFitter;
    private Image? iconImage;
    private LayoutElement? iconLayout;
    private LayoutElement? messageLayout;
    private Text? messageLabel;
    private ShadeRuntime.ShadeUnlockNotification? activeNotification;
    private float activeTimer;
    private float activeDuration;
    private float nextAvailableTime;
    private bool isInitialized;
    private bool subscribed;
    private bool queueDirty;
    private float lastAppliedScale = -1f;

    public void Initialize(Canvas canvas, Func<float> scale)
    {
        targetCanvas = canvas;
        scaleProvider = scale;

        if (!isInitialized)
        {
            BuildUI();
            isInitialized = true;
        }

        ApplyScale(force: true);
        Subscribe();
        queueDirty = ShadeRuntime.HasPendingNotifications;
    }

    private void OnEnable()
    {
        if (isInitialized)
        {
            Subscribe();
        }
    }

    private void OnDisable()
    {
        Unsubscribe();
    }

    private void OnDestroy()
    {
        Unsubscribe();
    }

    private void Subscribe()
    {
        if (subscribed)
        {
            return;
        }

        ShadeRuntime.NotificationsChanged += HandleQueueChanged;
        subscribed = true;
    }

    private void Unsubscribe()
    {
        if (!subscribed)
        {
            return;
        }

        ShadeRuntime.NotificationsChanged -= HandleQueueChanged;
        subscribed = false;
    }

    private void HandleQueueChanged()
    {
        queueDirty = true;
    }

    private void BuildUI()
    {
        if (targetCanvas == null)
        {
            return;
        }

        var root = new GameObject("ShadeUnlockPopupRoot");
        container = root.AddComponent<RectTransform>();
        container.SetParent(targetCanvas.transform, false);
        container.anchorMin = AnchorPoint;
        container.anchorMax = AnchorPoint;
        container.pivot = new Vector2(0.5f, 0.5f);
        container.anchoredPosition = Vector2.zero;

        containerGroup = root.AddComponent<CanvasGroup>();
        containerGroup.alpha = 0f;
        containerGroup.interactable = false;
        containerGroup.blocksRaycasts = false;

        layoutGroup = root.AddComponent<HorizontalLayoutGroup>();
        layoutGroup.childAlignment = TextAnchor.MiddleLeft;
        layoutGroup.spacing = BaseSpacing;
        layoutGroup.childForceExpandWidth = false;
        layoutGroup.childForceExpandHeight = false;

        contentSizeFitter = root.AddComponent<ContentSizeFitter>();
        contentSizeFitter.horizontalFit = ContentSizeFitter.FitMode.PreferredSize;
        contentSizeFitter.verticalFit = ContentSizeFitter.FitMode.PreferredSize;

        var iconGO = new GameObject("Icon");
        iconGO.transform.SetParent(container, false);
        iconImage = iconGO.AddComponent<Image>();
        iconImage.preserveAspect = true;
        iconImage.raycastTarget = false;
        iconImage.enabled = false;
        iconLayout = iconGO.AddComponent<LayoutElement>();
        iconLayout.preferredWidth = BaseIconSize;
        iconLayout.preferredHeight = BaseIconSize;
        iconLayout.ignoreLayout = true;

        var messageGO = new GameObject("Message");
        messageGO.transform.SetParent(container, false);
        messageLabel = messageGO.AddComponent<Text>();
        messageLabel.alignment = TextAnchor.MiddleLeft;
        messageLabel.font = Resources.GetBuiltinResource<Font>("Arial.ttf");
        messageLabel.fontSize = Mathf.RoundToInt(BaseFontSize);
        messageLabel.horizontalOverflow = HorizontalWrapMode.Overflow;
        messageLabel.verticalOverflow = VerticalWrapMode.Overflow;
        messageLabel.raycastTarget = false;
        messageLabel.text = string.Empty;
        messageLabel.color = AbilityColor;
        messageLayout = messageGO.AddComponent<LayoutElement>();
        messageLayout.flexibleWidth = 1f;
        messageLayout.minHeight = BaseIconSize * 0.5f;

        var shadow = messageGO.AddComponent<Shadow>();
        shadow.effectColor = new Color(0f, 0f, 0f, 0.85f);
        shadow.effectDistance = new Vector2(2f, -2f);
    }

    private void Update()
    {
        if (!isInitialized)
        {
            return;
        }

        ApplyScale();

        bool suppressed = ShouldSuppress();
        if (suppressed)
        {
            FadeTowards(0f);
        }

        if (ArePopupsMuted())
        {
            ClearActiveNotification();
            FadeTowards(0f);
            return;
        }

        if (activeNotification != null)
        {
            if (suppressed)
            {
                return;
            }

            FadeTowards(1f);
            activeTimer += Time.unscaledDeltaTime;
            if (activeTimer >= activeDuration)
            {
                ClearActiveNotification();
                nextAvailableTime = Time.unscaledTime + GetConfiguredDelay();
            }

            return;
        }

        FadeTowards(0f);

        if (suppressed)
        {
            return;
        }

        if (!queueDirty && !ShadeRuntime.HasPendingNotifications)
        {
            return;
        }

        if (Time.unscaledTime < nextAvailableTime)
        {
            return;
        }

        if (ShadeRuntime.TryDequeueNotification(out var notification))
        {
            Present(notification);
            queueDirty = ShadeRuntime.HasPendingNotifications;
        }
        else
        {
            queueDirty = false;
        }
    }

    private void Present(ShadeRuntime.ShadeUnlockNotification notification)
    {
        activeNotification = notification;
        activeTimer = 0f;
        activeDuration = GetConfiguredDuration(notification);

        if (messageLabel != null)
        {
            messageLabel.text = notification.Message;
            messageLabel.color = GetColorFor(notification.Type);
        }

        if (iconImage != null)
        {
            Sprite? sprite = notification.Icon;
            bool hasIcon = sprite != null;
            iconImage.sprite = sprite;
            iconImage.enabled = hasIcon;
            iconImage.gameObject.SetActive(hasIcon);
            if (iconLayout != null)
            {
                iconLayout.ignoreLayout = !hasIcon;
            }
        }

        FadeTowards(1f);
    }

    private void ClearActiveNotification()
    {
        activeNotification = null;
        activeTimer = 0f;
        activeDuration = 0f;
        if (messageLabel != null)
        {
            messageLabel.text = string.Empty;
        }

        if (iconImage != null)
        {
            iconImage.sprite = null;
            iconImage.enabled = false;
            iconImage.gameObject.SetActive(false);
        }

        if (iconLayout != null)
        {
            iconLayout.ignoreLayout = true;
        }
    }

    private void ApplyScale(bool force = false)
    {
        if (container == null)
        {
            return;
        }

        float scale = 1f;
        if (scaleProvider != null)
        {
            try
            {
                scale = Mathf.Max(0.5f, scaleProvider());
            }
            catch
            {
                scale = 1f;
            }
        }

        if (!force && Mathf.Approximately(scale, lastAppliedScale))
        {
            return;
        }

        if (layoutGroup != null)
        {
            layoutGroup.spacing = BaseSpacing * scale;
        }

        if (iconLayout != null)
        {
            float iconSize = Mathf.Max(24f, BaseIconSize * scale);
            iconLayout.preferredWidth = iconSize;
            iconLayout.preferredHeight = iconSize;
        }

        if (messageLayout != null && iconLayout != null)
        {
            messageLayout.minHeight = Mathf.Max(iconLayout.preferredHeight * 0.5f, 24f);
        }

        if (messageLabel != null)
        {
            int fontSize = Mathf.Clamp(Mathf.RoundToInt(BaseFontSize * scale), 18, 64);
            messageLabel.fontSize = fontSize;
            messageLabel.lineSpacing = Mathf.Lerp(1f, 1.15f, Mathf.Clamp01(scale - 1f));
        }

        lastAppliedScale = scale;
    }

    private void FadeTowards(float target)
    {
        if (containerGroup == null)
        {
            return;
        }

        float current = containerGroup.alpha;
        if (Mathf.Approximately(current, target))
        {
            containerGroup.alpha = target;
            return;
        }

        float step = Mathf.Max(0.01f, FadeSpeed * Time.unscaledDeltaTime);
        containerGroup.alpha = Mathf.MoveTowards(current, target, step);
    }

    private static bool ShouldSuppress()
    {
        try
        {
            if (ShadeSettingsMenu.IsShowing)
            {
                return true;
            }
        }
        catch
        {
        }

        try
        {
            var gm = GameManager.instance;
            if (gm != null)
            {
                if (!gm.IsGameplayScene())
                {
                    return true;
                }

                if (gm.IsGamePaused())
                {
                    return true;
                }
            }
        }
        catch
        {
        }

        return false;
    }

    private static bool ArePopupsMuted()
    {
        try
        {
            return ModConfig.Instance.shadeUnlockPopupsMuted;
        }
        catch
        {
            return false;
        }
    }

    private static float GetConfiguredDelay()
    {
        try
        {
            return Mathf.Max(0f, ModConfig.Instance.shadeUnlockPopupDelaySeconds);
        }
        catch
        {
            return 0.75f;
        }
    }

    private static float GetConfiguredDuration(ShadeRuntime.ShadeUnlockNotification notification)
    {
        float configured = GetBaseDuration();
        if (configured > 0f)
        {
            return Mathf.Max(0.5f, configured);
        }

        float duration = notification.Duration;
        if (duration <= 0f || float.IsNaN(duration) || float.IsInfinity(duration))
        {
            return ShadeRuntime.ShadeUnlockNotification.DefaultDuration;
        }

        return Mathf.Max(0.5f, duration);
    }

    private static float GetBaseDuration()
    {
        try
        {
            return ModConfig.Instance.shadeUnlockPopupDurationSeconds;
        }
        catch
        {
            return ShadeRuntime.ShadeUnlockNotification.DefaultDuration;
        }
    }

    private static Color GetColorFor(ShadeUnlockNotificationType type)
    {
        return type switch
        {
            ShadeUnlockNotificationType.Charm => CharmColor,
            ShadeUnlockNotificationType.Spell => SpellColor,
            _ => AbilityColor
        };
    }
}

