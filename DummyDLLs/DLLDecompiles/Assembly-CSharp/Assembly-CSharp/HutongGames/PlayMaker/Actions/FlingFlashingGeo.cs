using System;
using UnityEngine;

namespace HutongGames.PlayMaker.Actions
{
	// Token: 0x02000C3C RID: 3132
	[ActionCategory(ActionCategory.GameObject)]
	[Tooltip("Spawns a random amount of chosen GameObject from global pool and fires them off in random directions. used for flashing geo generated by fragile greed.")]
	public class FlingFlashingGeo : RigidBody2dActionBase
	{
		// Token: 0x06005F2F RID: 24367 RVA: 0x001E2E98 File Offset: 0x001E1098
		public override void Reset()
		{
			this.gameObject = null;
			this.spawnPoint = null;
			this.position = new FsmVector3
			{
				UseVariable = true
			};
			this.spawnMin = null;
			this.spawnMax = null;
			this.speedMin = null;
			this.speedMax = null;
			this.angleMin = null;
			this.angleMax = null;
			this.originVariationX = null;
			this.originVariationY = null;
		}

		// Token: 0x06005F30 RID: 24368 RVA: 0x001E2F00 File Offset: 0x001E1100
		public override void OnEnter()
		{
			if (this.gameObject.Value != null)
			{
				Vector3 a = Vector3.zero;
				Vector3 zero = Vector3.zero;
				if (this.spawnPoint.Value != null)
				{
					a = this.spawnPoint.Value.transform.position;
					if (!this.position.IsNone)
					{
						a += this.position.Value;
					}
				}
				else if (!this.position.IsNone)
				{
					a = this.position.Value;
				}
				int num = Random.Range(this.spawnMin.Value, this.spawnMax.Value + 1);
				for (int i = 1; i <= num; i++)
				{
					GameObject gameObject = this.gameObject.Value.Spawn(a, Quaternion.Euler(zero));
					float x = gameObject.transform.position.x;
					float y = gameObject.transform.position.y;
					float z = gameObject.transform.position.z;
					if (this.originVariationX != null)
					{
						x = gameObject.transform.position.x + Random.Range(-this.originVariationX.Value, this.originVariationX.Value);
						this.originAdjusted = true;
					}
					if (this.originVariationY != null)
					{
						y = gameObject.transform.position.y + Random.Range(-this.originVariationY.Value, this.originVariationY.Value);
						this.originAdjusted = true;
					}
					if (this.originAdjusted)
					{
						gameObject.transform.position = new Vector3(x, y, z);
					}
					base.CacheRigidBody2d(gameObject);
					float num2 = Random.Range(this.speedMin.Value, this.speedMax.Value);
					float num3 = Random.Range(this.angleMin.Value, this.angleMax.Value);
					this.vectorX = num2 * Mathf.Cos(num3 * 0.017453292f);
					this.vectorY = num2 * Mathf.Sin(num3 * 0.017453292f);
					Vector2 linearVelocity;
					linearVelocity.x = this.vectorX;
					linearVelocity.y = this.vectorY;
					this.rb2d.linearVelocity = linearVelocity;
					gameObject.GetComponent<SpriteFlash>().GeoFlash();
				}
			}
			base.Finish();
		}

		// Token: 0x04005C23 RID: 23587
		[RequiredField]
		[Tooltip("GameObject to spawn.")]
		public FsmGameObject gameObject;

		// Token: 0x04005C24 RID: 23588
		[Tooltip("GameObject to spawn at (optional).")]
		public FsmGameObject spawnPoint;

		// Token: 0x04005C25 RID: 23589
		[Tooltip("Position. If a Spawn Point is defined, this is used as a local offset from the Spawn Point position.")]
		public FsmVector3 position;

		// Token: 0x04005C26 RID: 23590
		[Tooltip("Minimum amount of objects to be spawned.")]
		public FsmInt spawnMin;

		// Token: 0x04005C27 RID: 23591
		[Tooltip("Maximum amount of objects to be spawned.")]
		public FsmInt spawnMax;

		// Token: 0x04005C28 RID: 23592
		[Tooltip("Minimum speed objects are fired at.")]
		public FsmFloat speedMin;

		// Token: 0x04005C29 RID: 23593
		[Tooltip("Maximum speed objects are fired at.")]
		public FsmFloat speedMax;

		// Token: 0x04005C2A RID: 23594
		[Tooltip("Minimum angle objects are fired at.")]
		public FsmFloat angleMin;

		// Token: 0x04005C2B RID: 23595
		[Tooltip("Maximum angle objects are fired at.")]
		public FsmFloat angleMax;

		// Token: 0x04005C2C RID: 23596
		[Tooltip("Randomises spawn points of objects within this range. Leave as 0 and all objects will spawn at same point.")]
		public FsmFloat originVariationX;

		// Token: 0x04005C2D RID: 23597
		public FsmFloat originVariationY;

		// Token: 0x04005C2E RID: 23598
		private float vectorX;

		// Token: 0x04005C2F RID: 23599
		private float vectorY;

		// Token: 0x04005C30 RID: 23600
		private bool originAdjusted;
	}
}
